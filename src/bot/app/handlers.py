import logging
import re
from datetime import datetime
from pathlib import Path

from aiogram import Bot, F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

import bot.app.keyboards as kb
from pipeplines.ragPipeline_tgbot import DialogManager, prompt, prompt_paths

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
log_dir = Path("src/logs")
log_dir.mkdir(exist_ok=True)
current_date = datetime.now().strftime("%Y-%m-%d")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_dir / f'tg_logs_{current_date}.txt', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤
dialog_manager = DialogManager()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class TripPlanning(StatesGroup):
    user_request = State()
    waiting_for_response = State()
    waiting_for_rating = State()

def markdown_to_html(text: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown –≤ HTML"""
    text = re.sub(r'\*\*(.*?)\*\*', r'<b>\1</b>', text)
    text = re.sub(r'\*(.*?)\*', r'<i>\1</i>', text)
    text = re.sub(r'`{1,3}(.*?)`{1,3}', r'<code>\1</code>', text)
    text = re.sub(r'\[(.*?)\]\((.*?)\)', r'<a href="\2">\1</a>', text)
    return text

def log_user_action(user_id: int, username: str, action: str):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –µ–¥–∏–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    :param username: username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param action: –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    """
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_message = f"[{timestamp}] User ID: {user_id}, Username: @{username}, Action: {action}"
    logger.info(log_message)

# ================= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =================

@router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    log_user_action(user.id, user.username, "started the bot")
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await message.answer('–ü—Ä–∏–≤–µ—Ç!üëã \n–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥—ã—Ö–∞ –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ –∏ –æ–±–ª–∞—Å—Ç–∏. \n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —É –º–µ–Ω—è –æ –∫–∞–∫–æ–º-–ª–∏–±–æ –º–µ—Å—Ç–µ –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç - –≤—ã–±–µ—Ä–∏—Ç–µ "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥". \n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ - –Ω–∞–∂–º–∏—Ç–µ "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"', reply_markup=kb.main)

@router.message(F.text == '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏')
async def cmd_help(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'"""
    user = message.from_user
    log_user_action(user.id, user.username, "requested bot capabilities")
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await message.answer('‚úÖ –ß—Ç–æ —è —É–º–µ—é? \n‚ñ™Ô∏è–°–æ—Å—Ç–∞–≤–ª—è—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ –º–µ—Å—Ç–∞–º –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –±—é–¥–∂–µ—Ç–∞ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: –°–æ—Å—Ç–∞–≤—å –º–∞—Ä—à—Ä—É—Ç –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–æ –ê–∫–∞–¥–µ–º–≥–æ—Ä–æ–¥–∫—É) \n‚ñ™Ô∏è–£—Ç–æ—á–Ω—è—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ –∫–∞–∫–æ–º-–ª–∏–±–æ –º–µ—Å—Ç–µ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –≤ –ù–°–û: –µ–≥–æ –∞–¥—Ä–µ—Å, —Ü–µ–Ω—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä –ü–æ–±–µ–¥–∞?) \n‚ñ™Ô∏è–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—Ä—É–∂–µ—Å–∫–∏–π –¥–∏–∞–ª–æ–≥ \n\n   ‚ÑπÔ∏è –Ø —Ç–æ–ª—å–∫–æ-—Ç–æ–ª—å–∫–æ —É—á—É—Å—å –∏ —É –º–µ–Ω—è —Ç–æ–∂–µ –µ—Å—Ç—å —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:  \n‚ñ™Ô∏è–Ø –Ω–∞–≤—Ä—è–¥–ª–∏ –ø–æ–π–º—É, —á—Ç–æ —Ç–∞–∫–æ–µ "–≥–æ—Ä—ã–Ω—ã—á", –Ω–æ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –≤–∞–º –ø–æ–º–æ—á—å, –µ—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—à–∏—Ç–µ: "—Ä–µ—Å—Ç–æ—Ä–∞–Ω –ì–æ—Ä—ã–Ω—ã—á" \n‚ñ™Ô∏è–ú–æ–≥—É –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –∏ –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ –Ω–µ –∑–Ω–∞—é –±–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –º–µ—Å—Ç. –≠—Ç–æ –ª–æ–∂—å. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —è –∑–Ω–∞—é, –Ω–æ –±–æ—é—Å—å –æ—à–∏–±–∏—Ç—å—Å—è. –ó–∞–¥–∞–≤–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏ –ø–æ –ª–æ–∫–∞—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–≥–¥–µ –ø–æ–∫—É—à–∞—Ç—å –≥—Ä—É–∑–∏–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏ –≤ –ê–∫–∞–¥–µ–º–≥–æ—Ä–æ–¥–∫–µ?") \n‚ñ™Ô∏è–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —Å–º–æ–≥—É –ø–æ–º–æ—á—å –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ "—Ä—è–¥–æ–º" —Å —á–µ–º-—Ç–æ, –Ω–æ –º–æ–≥—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–π–æ–Ω–µ –∏–ª–∏ —É–ª–∏—Ü–µ\n\n  üÜò –ï—Å–ª–∏ —è –±—É–¥—É –Ω–µ—Å—Ç–∏ —á–µ–ø—É—Ö—É, –Ω–∞—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ.')

@router.message(F.text == '–ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def contacts(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ–Ω—Ç–∞–∫—Ç—ã'"""
    user = message.from_user
    log_user_action(user.id, user.username, "requested contacts")
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await message.answer('üì© –ü–æ –≤–æ–∑–Ω–∏–∫—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ @alinshn‚ÇäÀö‚äπ‚ô°')

@router.message(F.text == '–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–Ω–æ–≤–∞')
async def restart_dialog(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–Ω–æ–≤–∞'"""
    user = message.from_user
    user_id = str(user.id)
    log_user_action(user.id, user.username, "restarted the dialog")
    dialog_manager.clear_history(user_id)
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await message.answer("üîÑ –î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω", reply_markup=kb.main)
    await state.set_state(TripPlanning.user_request)

@router.message(F.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥')
async def end_dialog(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥'"""
    user = message.from_user
    user_id = str(user.id)
    log_user_action(user.id, user.username, "ended the dialog")
    dialog_manager.clear_history(user_id)
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await message.answer("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ë—É–¥—É –æ—á–µ–Ω—å —Ä–∞–¥ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–µ!", reply_markup=kb.main)
    await state.clear()

@router.message(F.text == '–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥')
async def start_entertainment(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥'"""
    user = message.from_user
    user_id = str(user.id)
    log_user_action(user.id, user.username, "started new dialog")
    dialog_manager.clear_history(user_id)
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await message.answer(
        "üîÑ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ —Å –±–æ—Ç–æ–º.\n –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É —Å–≤–æ—é –ø—Ä–æ—Å—å–±—É –∏ –æ–Ω –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç!"
    )
    await state.set_state(TripPlanning.user_request)

@router.message(F.text == '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É')
async def start_feedback(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É'"""
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –±–æ—Ç–∞ –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥‚≠ê",
        reply_markup=kb.feedback_options
    )
    await state.set_state(TripPlanning.waiting_for_rating)

@router.message(TripPlanning.waiting_for_rating)
async def process_rating(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ü–µ–Ω–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = message.from_user
    if message.text.startswith(("1", "2", "3", "4", "5")):
        rating = int(message.text[0])
        await state.update_data(rating=rating)
    
    log_user_action(user.id, user.username, f"rate - {message.text}")

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!üí´",
        reply_markup=kb.main
    )
    await state.clear()

@router.message(TripPlanning.user_request)
async def process_user_request(message: Message, state: FSMContext, bot: Bot):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = message.from_user
    log_user_action(user.id, user.username, f"sent message: {message.text}")
    await state.set_state(TripPlanning.waiting_for_response)
    user_id = str(user.id)
    
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")
    processing_msg = await message.answer("‚è≥ –î—É–º–∞—é...")
    
    try:
        response = dialog_manager.generate_response(
            username=user_id,
            user_message=message.text,
            prompt=prompt,
            prompt_paths=prompt_paths
        )
        
        await processing_msg.delete()
        log_user_action(user.id, user.username, f"received response: {response}")
        await message.answer(
            markdown_to_html(response),
            reply_markup=kb.dialog_options,
            parse_mode="HTML"
        )
        
    except Exception as e:
        error_msg = f"Error: {str(e)}"
        log_user_action(user.id, user.username, error_msg)
        await processing_msg.delete()
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    await state.set_state(TripPlanning.user_request)